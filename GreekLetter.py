#!/usr/bin/python
# -*- coding: utf-8 -*-
import sublime, sublime_plugin

class GreekLetterExpandCommand(sublime_plugin.TextCommand):
	def run(self, edit):
		greekmappings = {
		'Alpha': 'Α',
		'alpha': 'α',
		'Beta': 'Β',
		'beta': 'β',
		'Gamma': 'Γ',
		'gamma': 'γ',
		'Delta': 'Δ',
		'delta': 'δ',
		'Epsilon': 'Ε',
		'epsilon': 'ϵ',
		'varepsilon': 'ε',
		'Zeta': 'Ζ',
		'zeta': 'ζ',
		'Eta': 'Η',
		'eta': 'η',
		'Theta': 'Θ',
		'theta': 'θ',
		'Iota': 'Ι',
		'iota': 'ι',
		'Kappa': 'Κ',
		'kappa': 'κ',
		'Lambda': 'Λ',
		'lambda': 'λ',
		'Mu': 'Μ',
		'mu': 'μ',
		'Nu': 'Ν',
		'nu': 'ν',
		'Xi': 'Ξ',
		'xi': 'ξ',
		'Omicron': 'Ο',
		'omicron': 'ο',
		'Pi': 'Π',
		'pi': 'π',
		'Rho': 'Ρ',
		'rho': 'ρ',
		'Sigma': 'Σ',
		'sigma': 'σ',
		'Tau': 'Τ',
		'tau': 'τ',
		'Upsilon': 'Υ',
		'upsilon': 'υ',
		'Phi': 'Φ',
		'phi': 'φ',
		'varphi': 'ϕ',
		'Chi': 'Χ',
		'chi': 'χ',
		'Psi': 'Ψ',
		'psi': 'ψ',
		'Omega': 'Ω',
		'omega': 'ω'
		}
		# double underscore __ for superscripts
		# single underscore _ for subscripts
		mathmappings = {
		'ell': 'ℓ',
		'approx': '≈',
		'circ': '∘',
		'pm': '±',
		'bfAlpha': '𝚨',
		'bfBeta': '𝚩',
		'bfGamma': '𝚪',
		'bfDelta': '𝚫',
		'bfEpsilon': '𝚬',
		'bfZeta': '𝚭',
		'bfEta': '𝚮',
		'bfTheta': '𝚯',
		'bfIota': '𝚰',
		'bfKappa': '𝚱',
		'bfLambda': '𝚲',
		'bfMu': '𝚳',
		'bfNu': '𝚴',
		'bfXi': '𝚵',
		'bfOmicron': '𝚶',
		'bfPi': '𝚷',
		'bfRho': '𝚸',
		'bfvarTheta': '𝚹',
		'bfSigma': '𝚺',
		'bfTau': '𝚻',
		'bfUpsilon': '𝚼',
		'bfPhi': '𝚽',
		'bfChi': '𝚾',
		'bfPsi': '𝚿',
		'bfOmega': '𝛀',
		'bfnabla': '𝛁',
		'bfalpha': '𝛂',
		'bfbeta': '𝛃',
		'bfgamma': '𝛄',
		'bfdelta': '𝛅',
		'bfepsilon': '𝛆',
		'bfzeta': '𝛇',
		'bfeta': '𝛈',
		'bftheta': '𝛉',
		'bfiota': '𝛊',
		'bfkappa': '𝛋',
		'bflambda': '𝛌',
		'bfmu': '𝛍',
		'bfnu': '𝛎',
		'bfxi': '𝛏',
		'bfomicron': '𝛐',
		'bfpi': '𝛑',
		'bfrho': '𝛒',
		'bfvarsigma': '𝛓',
		'bfsigma': '𝛔',
		'bftau': '𝛕',
		'bfupsilon': '𝛖',
		'bfvarphi': '𝛗',
		'bfchi': '𝛘',
		'bfpsi': '𝛙',
		'bfomega': '𝛚',
		'bfpartial': '𝛛',
		'bfvarepsilon': '𝛜',
		'bfvartheta': '𝛝',
		'bfvarkappa': '𝛞',
		'bfphi': '𝛟',
		'bfvarrho': '𝛠',
		'bfvarpi': '𝛡',
		'nabla': '∇',
		'scrA': '𝒜',
		'scrC': '𝒞',
		'scrD': '𝒟',
		'scrE': 'ℰ',
		'scrF': 'ℱ',
		'scrG': '𝒢',
		'scrH': 'ℋ',
		'scrI': 'ℐ',
		'scrJ': '𝒥',
		'scrK': '𝒦',
		'scrL': 'ℒ',
		'scrM': 'ℳ',
		'scrN': '𝒩',
		'scrO': '𝒪',
		'scrP': '𝒫',
		'scrQ': '𝒬',
		'scrR': 'ℛ',
		'scrS': '𝒮',
		'scrT': '𝒯',
		'scrU': '𝒰',
		'scrV': '𝒱',
		'scrW': '𝒲',
		'scrX': '𝒳',
		'scrY': '𝒴',
		'scrZ': '𝒵',
		'scra': '𝒶',
		'scrb': '𝒷',
		'scrc': '𝒸',
		'scrd': '𝒹',
		'scrf': '𝒻',
		'scrh': '𝒽',
		'scri': '𝒾',
		'scrj': '𝒿',
		'scrk': '𝓀',
		'scrl': '𝓁',
		'scrm': '𝓂',
		'scrn': '𝓃',
		'scrp': '𝓅',
		'scrq': '𝓆',
		'scrr': '𝓇',
		'scrs': '𝓈',
		'scrt': '𝓉',
		'scru': '𝓊',
		'scrv': '𝓋',
		'scrw': '𝓌',
		'scrx': '𝓍',
		'scry': '𝓎',
		'scrz': '𝓏',
		'bscrA': '𝓐',
		'bscrB': '𝓑',
		'bscrC': '𝓒',
		'bscrD': '𝓓',
		'bscrE': '𝓔',
		'bscrF': '𝓕',
		'bscrG': '𝓖',
		'bscrH': '𝓗',
		'bscrI': '𝓘',
		'bscrJ': '𝓙',
		'bscrK': '𝓚',
		'bscrL': '𝓛',
		'bscrM': '𝓜',
		'bscrN': '𝓝',
		'bscrO': '𝓞',
		'bscrP': '𝓟',
		'bscrQ': '𝓠',
		'bscrR': '𝓡',
		'bscrS': '𝓢',
		'bscrT': '𝓣',
		'bscrU': '𝓤',
		'bscrV': '𝓥',
		'bscrW': '𝓦',
		'bscrX': '𝓧',
		'bscrY': '𝓨',
		'bscrZ': '𝓩',
		'bscra': '𝓪',
		'bscrb': '𝓫',
		'bscrc': '𝓬',
		'bscrd': '𝓭',
		'bscre': '𝓮',
		'bscrf': '𝓯',
		'bscrg': '𝓰',
		'bscrh': '𝓱',
		'bscri': '𝓲',
		'bscrj': '𝓳',
		'bscrk': '𝓴',
		'bscrl': '𝓵',
		'bscrm': '𝓶',
		'bscrn': '𝓷',
		'bscro': '𝓸',
		'bscrp': '𝓹',
		'bscrq': '𝓺',
		'bscrr': '𝓻',
		'bscrs': '𝓼',
		'bscrt': '𝓽',
		'bscru': '𝓾',
		'bscrv': '𝓿',
		'bscrw': '𝔀',
		'bscrx': '𝔁',
		'bscry': '𝔂',
		'bfA': '𝐀',
		'bfB': '𝐁',
		'bfC': '𝐂',
		'bfD': '𝐃',
		'bfE': '𝐄',
		'bfF': '𝐅',
		'bfG': '𝐆',
		'bfH': '𝐇',
		'bfI': '𝐈',
		'bfJ': '𝐉',
		'bfK': '𝐊',
		'bfL': '𝐋',
		'bfM': '𝐌',
		'bfN': '𝐍',
		'bfO': '𝐎',
		'bfP': '𝐏',
		'bfQ': '𝐐',
		'bfR': '𝐑',
		'bfS': '𝐒',
		'bfT': '𝐓',
		'bfU': '𝐔',
		'bfV': '𝐕',
		'bfW': '𝐖',
		'bfX': '𝐗',
		'bfY': '𝐘',
		'bfZ': '𝐙',
		'bfa': '𝐚',
		'bfb': '𝐛',
		'bfc': '𝐜',
		'bfd': '𝐝',
		'bfe': '𝐞',
		'bff': '𝐟',
		'bfg': '𝐠',
		'bfh': '𝐡',
		'bfi': '𝐢',
		'bfj': '𝐣',
		'bfk': '𝐤',
		'bfl': '𝐥',
		'bfm': '𝐦',
		'bfn': '𝐧',
		'bfo': '𝐨',
		'bfp': '𝐩',
		'bfq': '𝐪',
		'bfr': '𝐫',
		'bfs': '𝐬',
		'bft': '𝐭',
		'bfu': '𝐮',
		'bfv': '𝐯',
		'bfw': '𝐰',
		'bfx': '𝐱',
		'bfy': '𝐲',
		'bfz': '𝐳',
		'itA': '𝐴',
		'itB': '𝐵',
		'itC': '𝐶',
		'itD': '𝐷',
		'itE': '𝐸',
		'itF': '𝐹',
		'itG': '𝐺',
		'itH': '𝐻',
		'itI': '𝐼',
		'itJ': '𝐽',
		'itK': '𝐾',
		'itL': '𝐿',
		'itM': '𝑀',
		'itN': '𝑁',
		'itO': '𝑂',
		'itP': '𝑃',
		'itQ': '𝑄',
		'itR': '𝑅',
		'itS': '𝑆',
		'itT': '𝑇',
		'itU': '𝑈',
		'itV': '𝑉',
		'itW': '𝑊',
		'itX': '𝑋',
		'itY': '𝑌',
		'itZ': '𝑍',
		'ita': '𝑎',
		'itb': '𝑏',
		'itc': '𝑐',
		'itd': '𝑑',
		'ite': '𝑒',
		'itf': '𝑓',
		'itg': '𝑔',
		'iti': '𝑖',
		'itj': '𝑗',
		'itk': '𝑘',
		'itl': '𝑙',
		'itm': '𝑚',
		'itn': '𝑛',
		'ito': '𝑜',
		'itp': '𝑝',
		'itq': '𝑞',
		'itr': '𝑟',
		'its': '𝑠',
		'itt': '𝑡',
		'itu': '𝑢',
		'itv': '𝑣',
		'itw': '𝑤',
		'itx': '𝑥',
		'ity': '𝑦',
		'itz': '𝑧',
		'biA': '𝑨',
		'biB': '𝑩',
		'biC': '𝑪',
		'biD': '𝑫',
		'biE': '𝑬',
		'biF': '𝑭',
		'biG': '𝑮',
		'biH': '𝑯',
		'biI': '𝑰',
		'biJ': '𝑱',
		'biK': '𝑲',
		'biL': '𝑳',
		'biM': '𝑴',
		'biN': '𝑵',
		'biO': '𝑶',
		'biP': '𝑷',
		'biQ': '𝑸',
		'biR': '𝑹',
		'biS': '𝑺',
		'biT': '𝑻',
		'biU': '𝑼',
		'biV': '𝑽',
		'biW': '𝑾',
		'biX': '𝑿',
		'biY': '𝒀',
		'biZ': '𝒁',
		'bia': '𝒂',
		'bib': '𝒃',
		'bic': '𝒄',
		'bid': '𝒅',
		'bie': '𝒆',
		'bif': '𝒇',
		'big': '𝒈',
		'bih': '𝒉',
		'bii': '𝒊',
		'bij': '𝒋',
		'bik': '𝒌',
		'bil': '𝒍',
		'bim': '𝒎',
		'bin': '𝒏',
		'bio': '𝒐',
		'bip': '𝒑',
		'biq': '𝒒',
		'bir': '𝒓',
		'bis': '𝒔',
		'bit': '𝒕',
		'biu': '𝒖',
		'biv': '𝒗',
		'biw': '𝒘',
		'bix': '𝒙',
		'biy': '𝒚',
		'biz': '𝒛',
		'cdot': '⋅',
		'bbA': '𝔸',
		'bba': '𝕒',
		'bbB': '𝔹',
		'bbb': '𝕓',
		'bbC': 'ℂ',
		'bbc': '𝕔',
		'bbD': '𝔻',
		'bbd': '𝕕',
		'bbE': '𝔼',
		'bbe': '𝕖',
		'bbF': '𝔽',
		'bbf': '𝕗',
		'bbG': '𝔾',
		'bbg': '𝕘',
		'bbH': 'ℍ',
		'bbh': '𝕙',
		'bbI': '𝕀',
		'bbi': '𝕚',
		'bbJ': '𝕁',
		'bbj': '𝕛',
		'bbK': '𝕂',
		'bbk': '𝕜',
		'bbL': '𝕃',
		'bbl': '𝕝',
		'bbM': '𝕄',
		'bbm': '𝕞',
		'bbN': 'ℕ',
		'bbn': '𝕟',
		'bbO': '𝕆',
		'bbo': '𝕠',
		'bbP': 'ℙ',
		'bbp': '𝕡',
		'bbQ': 'ℚ',
		'bbq': '𝕢',
		'bbR': 'ℝ',
		'bbr': '𝕣',
		'bbS': '𝕊',
		'bbs': '𝕤',
		'bbT': '𝕋',
		'bbt': '𝕥',
		'bbU': '𝕌',
		'bbu': '𝕦',
		'bbV': '𝕍',
		'bbv': '𝕧',
		'bbW': '𝕎',
		'bbw': '𝕨',
		'bbX': '𝕏',
		'bbx': '𝕩',
		'bbY': '𝕐',
		'bby': '𝕪',
		'bbZ': 'ℤ',
		'bbz': '𝕫',
		'bbiD': 'ⅅ',
		'bbid': 'ⅆ',
		'bbie': 'ⅇ',
		'bbii': 'ⅈ',
		'bbij': 'ⅉ',
		'bbgamma': 'ℽ',
		'bbGamma': 'ℾ',
		'bbpi': 'ℼ',
		'bbPi': 'ℿ',
		'bbsum': '⅀',
		'bb0': '𝟘',
		'bb1': '𝟙',
		'bb2': '𝟚',
		'bb3': '𝟛',
		'bb4': '𝟜',
		'bb5': '𝟝',
		'bb6': '𝟞',
		'bb7': '𝟟',
		'bb8': '𝟠',
		'bb9': '𝟡',
		'exp': '𝔼',
		'expect': '𝔼',
		'expectation': '𝔼',
		'choose': '(⋮)',
		'binom': '(⋮)',
		'binomial': '(⋮)',
		'dot': '⦁',
		'qed': '∎',
		'QED': '∎',
		'ismember': '∈',
		'ismem': '∈',
		'isel': '∈',
		'elof': '∈',
		'in': '∈',
		'elementof': '∈',
		'notelof': '∉',
		'notelementof': '∉',
		'subset': '⊆',
		'notsubset': '⊈',
		'nsubset': '⊈',
		'union': '∪',
		'intersect': '∩',
		'emptyset': 'Ø',
		'aleph': 'ℵ',
		'power': '℘',
		'notequal': '≠',
		'ne': '≠',
		'partial': '∂',
		'therefore': '∴',
		'integral': '∫',
		'diff': 'Δ',
		'le': '≤',
		'ge': '≥',
		'SUM': 'Σ',
		'sqrt': '√',
		'__0': '⁰',
		'__1': '¹',
		'__2': '²',
		'__3': '³',
		'__4': '⁴',
		'__5': '⁵',
		'__6': '⁶',
		'__7': '⁷',
		'__8': '⁸',
		'__9': '⁹',
		'__a': 'ᵃ',
		'__b': 'ᵇ',
		'__c': 'ᶜ',
		'__d': 'ᵈ',
		'__e': 'ᵉ',
		'__f': 'ᶠ',
		'__g': 'ᵍ',
		'__h': 'ʰ',
		'__i': 'ⁱ',
		'__j': 'ʲ',
		'__k': 'ᵏ',
		'__l': 'ˡ',
		'__m': 'ᵐ',
		'__n': 'ⁿ',
		'__o': 'ᵒ',
		'__p': 'ᵖ',
		'__r': 'ʳ',
		'__s': 'ˢ',
		'__t': 'ᵗ',
		'__u': 'ᵘ',
		'__v': 'ᵛ',
		'__w': 'ʷ',
		'__x': 'ˣ',
		'__y': 'ʸ',
		'__z': 'ᶻ',
		'__T': 'ᵀ',
		'__plus': '⁺',
		'__minus': '⁻',
		'__equal': '⁼',
		'__lpar': '⁽',
		'__rpar': '⁾',
		'_0': '₀',
		'_1': '₁',
		'_2': '₂',
		'_3': '₃',
		'_4': '₄',
		'_5': '₅',
		'_6': '₆',
		'_7': '₇',
		'_8': '₈',
		'_9': '₉',
		'_i': 'ᵢ',
		'_plus': '₊',
		'_minus': '₋',
		'_equal': '₌',
		'_lpar': '₍',
		'_rpar': '₎',
		'check': '✓',
		'c': '✓',
		'cc': '✓',
		'CHECK': '✔', # Emoji
		'CC': '✔', # Emoji
		'X': '✖' # Emoji
		}
		self.view.run_command("expand_selection",{"to": "word"})
		sels = self.view.sel()
		for sel in sels:
			key = self.view.substr(sel)
			print( key )
			if key in greekmappings:
				replacement = greekmappings[key]
				self.view.replace(edit,sel,replacement)
			elif key in mathmappings:
				replacement = mathmappings[key]
				# if self.view.substr(sublime.Region(sel.a-1, sel.a)) == ' ':
				# 	sel = sublime.Region(sel.a-1, sel.b)
				self.view.replace(edit,sel,replacement)
		end = self.view.sel()[0].b
		pt = sublime.Region(end, end)
		self.view.sel().clear()
		self.view.sel().add(pt)
